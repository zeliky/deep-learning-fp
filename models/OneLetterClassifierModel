class OneLetterClassifierModel:

    def get_model(self, input_shape, num_classes):
        model = Sequential()
        model.add(Input(shape=input_shape))
        # Convolutional layers
        model.add(Conv2D(input_shape=input_shape,
                         filters=5, kernel_size=(6, 6), padding='SAME', activation='relu' ))
        model.add(MaxPooling2D((4,4)))


        model.add(Conv2D(filters=128, kernel_size=(3, 3), strides=(1, 1), padding='SAME', activation='relu'))
        model.add(Conv2D(filters=64, kernel_size=(10, 10), strides=(1, 1), padding='SAME', activation='relu'))
        model.add(MaxPooling2D((2,2))) 
       
        model.add(Conv2D(filters=64, kernel_size=(3, 3), strides=(1, 1), padding='SAME', activation='relu'))
        model.add(Conv2D(filters=32, kernel_size=(10, 10), strides=(1, 1), padding='SAME', activation='relu'))
        model.add(MaxPooling2D((2,2)))  
                    
        model.add(Conv2D(filters=32, kernel_size=(3, 3), strides=(1, 1), padding='SAME', activation='relu'))            
        model.add(Conv2D(filters=32, kernel_size=(10, 10), strides=(1, 1), padding='SAME', activation='relu'))  
        model.add(MaxPooling2D((2,2))) 

    
        model.add(Flatten())


        
        model.add(Dense(1024, activation='relu', name='dense_1024'))
        model.add(Dense(512, activation='relu', name='dense_512'))
       # model.add(Dense(64, activation='relu', name='dense_64'))
        # model.add(Dense(1024, activation='relu',
        # )
        # 5) Classification Layer
        model.add(Dense(num_classes, activation='softmax'))

        return model
